# logging: 
# 共有8个级别，按照从低到高为：ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF。
Configuration:
  status: ERROR
  Properties: # 定义全局变量
    Property: 
      # 配置日志存放的文件夹
     - name: LOG_HOME
       value: /timertask-logs
     # 配置日志名称
     - name: LOG_NAME_HOME
       value: timertask-logs
     # 输出到控制台的日志级别
     - name: CONSOLE_LEVEL
       value: info
     #  输出到文件的日志级别
     - name: FILE_LEVEL
       value: info
     # 每隔几天生成一个文件
     - name: LOG_INTERVAL
       value: 10
     # 删除几天前的日志
     - name: DEL_BEFORE_DAY
       value: 30
  Appenders:
    # 输出到控制台
    Console: 
      name: Console
      target: SYSTEM_OUT
      # 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）
      ThresholdFilter:
        level: ${CONSOLE_LEVEL}
        onMatch: ACCEPT
        onMismatch: DENY
      PatternLayout:
        pattern: "[%d{yyyy/MM/dd HH:mm:ss-SSS}] [%p] ===> 【%F -- %L】：%m%n"
    # 文件会打印出所有信息，append=true程序每次启动追加内容，否则每次将清空
    RollingFile:
      name: FileLog
      fileName: ${LOG_HOME}/${LOG_NAME_HOME}.log
      filePattern: ${LOG_HOME}/${LOG_NAME_HOME}_%d{yyyy-MM-dd}_%i.log
      append: true
      ThresholdFilter: 
        # 只记录info日志
        level: ${FILE_LEVEL} 
        onMatch: ACCEPT
        onMismatch: DENY
      # 记录的格式
      PatternLayout:
        charset: UTF-8 
        pattern: "[%d{yyyy/MM/dd HH:mm:ss-SSS}] [%p] ===>【%F--%L】：%msg%n"
        
      Policies:
        # filepattern 中的日期格式精确位数决定了生成日志的日期单位
        # interval 决定该单位下的间隔数，时间单位为filePattern中设置的时间，如果在上面例子中 interval 设置为 1，那么就是1天生成一个日志； -->
        TimeBasedTriggeringPolicy: 
          modulate: true
          # 每隔LOG_INTERVAL天生成一个文件
          interval: ${LOG_INTERVAL}
        SizeBasedTriggeringPolicy: 
          # 文件最大为10M，超过则再生成一个文件
          size: 10 MB
      # 配置说明: 只处理位于${LOG_HOME}文件夹下的*${LOG_NAME_HOME}*.log的文件的最后一次修改时间超过30天的文件
      DefaultRolloverStrategy: 
        max: 10000000
        Delete: 
          basePath: "${LOG_HOME}/"
          maxDepth: 2
          IfFileName: 
            glob: "*${LOG_NAME_HOME}*.log"
          IfLastModified: 
            # 日志文件超过DEL_BEFORE_DAY天删除
            age: "${DEL_BEFORE_DAY}d" 
  Loggers:
    Root:
      level: debug
      AppenderRef:
       - ref: Console
       - ref: FileLog
    Logger:
      # 过滤掉spring和mybatis的一些无用的DEBUG信息
    #- name: org.springframework
     # level: TRACE
      #additivity: false
      
      # 过滤掉spring和mybatis的一些无用的DEBUG信息
    - name: com.zxy.dpiserver.dao
      level: TRACE
      
        
        
        